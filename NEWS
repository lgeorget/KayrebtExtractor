Kayrebt::Extractor NEWS -- history of user visible changes.

    A GCC plugin that dumps UML2-like activity diagrams from C functions
    Copyright (C) 2015 Laurent Georget <laurent.georget@irisa.fr>

    This program is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 2 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License along
    with this program; if not, write to the Free Software Foundation, Inc.,
    51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.


* 1.0.1
	* Fix ISRA bug: functions generated by GCC ending with '.isra.(\d+)'
	have now a correct URL

* 2.0.0-rc1
        * Export source file and line information in graph so that
	Kayrebt::Viewer can take advantage of this to improve the visualization

	== version 2.0 never released ==

* 3.0.0-rc1
	* Change entirely the "attribute" mechanism
	Now, the plugin can add unrestricted attributes to the graphs using
	addGraphAttributes(key,value) and addNodeAttributes(node,key,value)
	No support for attributes lacking a default operator<<, nor for the
	categories yet but the API is ready for it.

* 3.0.0-rc2
	* Incorporate the configuration-defined categories in the new
	attributes API
	The format of the configuration file has changed a little. Now the
	categories of representations must be YAML maps. For example:

	categories:
	  1:
	    style: filled
	    fillcolor: yellow
	    bgcolor: blue
	  2:
	    bgcolor: green

	-- does not compile, sorry

* 3.0.0-rc3
	* Fix compilation issue due to the exporting of boost headers in the
	plugin code.
	* Fix the installation of the symlink to $(gcc -print-file-name=plugin)
	(by the way, this may be the bad way of doing it)

* 3.0.0-rc4
	* When a node has no label, dot uses its id as a label. This is not
	desirable in our case, therefore, we explicitly give an empty label
	to all nameless nodes.
	* Call nodes and Assign nodes had different policies about when
	generating an object node (rectangle) or an action node (ellipse). Now,
	they both output an action node when the left-hand side of the
	assignment is an anonymous or temporary variable (or, in the case of
	void functions, when there is no assignment at all), and an object
	node in the other case.

	== version 3.0 released on 2015-10-22 ==
